# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  config.vm.box = "ubuntu/xenial64"

  # 为了直接使用虚拟机上运行的Wireshark的GUI，设置x forwarding。
  # Ryoma Yasunaga，2018/12/1
  config.ssh.forward_x11 = true

  # 下载各种软件。
  config.vm.provision "shell", inline: <<-SHELL
    apt update
    apt upgrade -y

    # x11 forwarding相关
    apt install x11-apps -y

    # WireShark．为了避免使用会话型，需要进行详细的设置。
    DEBIAN_FRONTEND=noninteractive apt -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install wireshark
    # 为了使一般用户也能使用，需要修改dumpcap的设置。
    setcap 'CAP_NET_RAW+eip CAP_NET_ADMIN+eip' /usr/bin/dumpcap

    # FTP服务器。将设置改为可以从外部修改。
    apt install vsftpd -y
    echo 'write_enable=YES' >> /etc/vsftpd.conf

    # 通过FTP传输的100MB的冗杂文件。
    dd if=/dev/zero of=tempfile bs=1M count=100
    # 修改权限使得可以在FTP上修改文件。
    chmod 777 tempfile

    # 将拥塞控制算法改为reno。
    echo 'net.ipv4.tcp_congestion_control = reno' >> /etc/sysctl.conf
    sysctl -p
    #sysctl -w net.ipv4.tcp_congestion_control=reno
　
    # 从neko9代码库下载必要的文件，保存在~/src
    # reload --provision的时候，会有错误存在其中，每次需要初始化
    rm -r /home/vagrant/src
    git clone https://github.com/ituring/tcp-book.git /home/vagrant/src/

  SHELL

  config.vm.define :guest1 do | guest1 |
    guest1.vm.hostname = "guest1"
    guest1.vm.network :private_network, ip: "192.168.33.10", virtualbox__intnet: "intnet"
  end

  config.vm.define :guest2 do | guest2 |
    guest2.vm.hostname = "guest2"
    guest2.vm.network :private_network, ip: "192.168.33.20", virtualbox__intnet: "intnet"
  end

end
